<?xml version="1.0"?>

<selectors>

  <selector name="int literal 1" selects="all">
    <requirementId>selector.literal.approxnumeric</requirementId>
    <requirementId>selector.expression</requirementId>
    <expression>1 = 1</expression>
  </selector>

  <selector name="int literal 2" selects="all">
    <requirementId>selector.literal.exactnumeric</requirementId>
    <requirementId>selector.expression</requirementId>
    <!-- verify that the implementation handles Long.MAX_VALUE -->
    <expression>9223372036854775807 = 9223372036854775807</expression>
  </selector>

  <selector name="int literal 3" selects="all">
    <requirementId>selector.literal.exactnumeric</requirementId>
    <requirementId>selector.expression</requirementId>
    <!-- verify that the implementation handles Long.MIN_VALUE -->
    <expression>-9223372036854775808 = -9223372036854775808</expression>
  </selector>

  <selector name="int literal 4" selects="all">
    <requirementId>selector.literal.exactnumeric</requirementId>
    <requirementId>selector.expression</requirementId>
    <!-- verify that octal numbers are handled correctly -->
    <expression>010 = 8</expression>
  </selector>

  <selector name="int literal 5" selects="all">
    <requirementId>selector.literal.exactnumeric</requirementId>
    <requirementId>selector.expression</requirementId>
    <!-- verify that hexadecimal numbers are handled correctly -->
    <expression>0xA = 10</expression>
  </selector>

  <selector name="int literal 6" selects="all">
    <requirementId>selector.literal.exactnumeric</requirementId>
    <requirementId>selector.expression</requirementId>
    <!-- verify that hexadecimal numbers are handled correctly -->
    <expression>0xa = 10</expression>
  </selector>

  <selector name="invalid int literal 1" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <expression>1</expression>
  </selector>

  <selector name="invalid int literal 2" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <expression>-1</expression>
  </selector>

  <selector name="invalid int literal 3" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <expression>2 &gt; '1'</expression>
  </selector>

  <selector name="invalid int literal 4" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <expression>1 &lt;&gt; false</expression>
  </selector>

  <selector name="invalid int literal 5" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <expression>1 &lt;&gt; true</expression>
  </selector>

  <selector name="invalid int literal 6" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <!-- exceeds range for long -->
    <expression>9223372036854775807 &lt; 9223372036854775808</expression>
  </selector>

  <selector name="invalid int literal 7" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <expression>92L &lt; 93L</expression>
  </selector>

  <selector name="invalid int literal 8" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <!-- check if the implementation handles octal -->
    <expression>8 = 08</expression>
  </selector>

  <selector name="invalid int literal 9" selects="none" valid="false">
    <requirementId>selector.validation</requirementId>
    <!-- divide by zero - most selector implementations will pick this up -->
    <!-- at evaluation time.                                              -->
    <expression>1 / 0</expression>
  </selector>

</selectors>
